#!/bin/bash

cartridge_type="python-3.3"

#  Ensure home directory sourced in.
[ -z "$OPENSHIFT_HOMEDIR" ]  &&  source ~/.env/OPENSHIFT_HOMEDIR

#  Setup variables.
python33_dir=${OPENSHIFT_HOMEDIR}/$cartridge_type
python33_binary="$python33_dir/opt/bin/python3.3"
virtenv_dir=$python33_dir/virtenv

#  Add the python3.3 shared library to the load path.
export LD_LIBRARY_PATH="${python33_dir}/opt/lib:${LD_LIBRARY_PATH}"


#
#  Utility functions to create/update, delete, activate and make relocatable
#  the python-3.3 virtualenv. 
#

function create_virtualenv() {
   if [ -d "$virtenv_dir" ]; then
      pushd "$virtenv_dir" > /dev/null
   else
      pushd . > /dev/null
   fi

   # Hack to fix symlink on rsync issue
   /bin/rm -f lib64
   virtualenv -p $python33_binary --system-site-packages "$virtenv_dir"

   popd > /dev/null

}  #  End of function  create_virtualenv. 


function delete_virtualenv() {
   rm -rf $python33_dir/virtenv/*

}  #  End of function  delete_virtualenv. 


function activate_virtualenv() {
   source "$python33_dir/activate_virtenv"

}  #  End of function  activate_virtualenv. 


function make_virtualenv_relocatable() {
   virtualenv --relocatable ~/$cartridge_type/virtenv

}  #  End of function  make_virtualenv_relocatable.


#
#  Misc functions - add/remove environment variables and extract package files.
#

function _name_to_env_var_name() {
   echo "$1" | sed 's/[^A-Za-z0-9_]/_/g' | tr '[:lower:]' '[:upper:]'

}  #  End of function  _convert_name_to_env_var_name.


function add_cartridge_env_var() {
   [ -n "$1" ]  ||  return 1
   name=$(_name_to_env_var_name "$1")
   value=$2

   echo "$value" > "${OPENSHIFT_HOMEDIR}/$cartridge_type/.env/$name"

}  #  End of function  add_cartridge_env_var.


function remove_cartridge_env_var() {
   [ -n "$1" ]  ||  return 1
   name=$(_name_to_env_var_name "$1")
   cart_dir=${OPENSHIFT_HOMEDIR}/$cartridge_type

   [ -f "$cart_dir/.env/$name" ]  &&  rm -f $cart_dir/.env/$name

}  #  End of function  remove_cartridge_env_var.


function _extract_files() {
   pkgdir=${1:-"."}
   destdir=${2:-"."}

   [ -d "$pkgdir" ]  ||  return 1
 
   #  In place extract the tarball files -- supports .tgz, .tar.gz, .tar and
   #  zip files and in that order.
   mkdir -p "$destdir"
   pushd "$destdir" > /dev/null

   for f in `ls $pkgdir/*.tgz $pkgdir/*.tar.gz 2> /dev/null`; do
      tar -zxf "$f"
   done

   for f in `ls $pkgdir/*.tar 2> /dev/null`; do
      tar -xf "$f"
   done

   for f in `ls $pkgdir/*.zip 2> /dev/null`; do
      unzip "$f"
   done

   popd > /dev/null

}  #  End of function  _extract_files.


function extract_package_files() {
   #  Try the machine specific packages first and then the top level packages.
   _extract_files "$1/$(uname -m)" "$1"
   _extract_files "$1" "$1"

}  #  End of function  extract_package_files.


