#!/bin/bash

cartridge_type="python-3.3"
distribute_setup_uri="http://python-distribute.org/distribute_setup.py"

#  Ensure home directory sourced in.
[ -z "$OPENSHIFT_HOMEDIR" ]  &&  source ~/.env/OPENSHIFT_HOMEDIR

#  Setup variables.
python33_dir=${OPENSHIFT_HOMEDIR}/$cartridge_type
python33_binary="$python33_dir/opt/bin/python3.3"
pyvenv33_script="$python33_dir/opt/bin/pyvenv-3.3"
venv_dir=$python33_dir/virtenv/venv


#  Add the python3.3 shared library to the load path.
export LD_LIBRARY_PATH="${python33_dir}/opt/lib:${LD_LIBRARY_PATH}"


#
#  Utility functions to install setup tools, create/update, delete, activate
#  and make relocatable the python-3.3 virtual env.
#

function install_setup_tools() {
   pushd "$venv_dir" > /dev/null

   # Activate virtual env, dowload distribute_setup and run it.
   source bin/activate
   curl -L -O "$distribute_setup_uri"
   python distribute_setup.py

   # Activate virtual env so as to get access to easy_install and install pip.
   source bin/activate
   easy_install pip

   popd > /dev/null

   make_virtualenv_relocatable

}  #  End of function  install_setup_tools.


function create_virtualenv() {
   run_setup_in_background=$1
   if [ ! -d "$venv_dir" ]  ||  ! $(ls "$venv_dir" > /dev/null 2>&1); then
      venv_opts="--system-site-packages"
      "$python33_binary" "$pyvenv33_script" $venv_opts --clear "$venv_dir"
   fi

   setup_binaries=("$venv_dir/bin/easy_install" "$venv_dir/bin/pip")
   if ! $(ls ${setup_binaries[@]} > /dev/null 2>&1); then
      if [ -n "$run_setup_in_background" ]; then
         install_setup_tools > /tmp/install.log 2>&1 &
      else
         install_setup_tools
      fi
   fi

}  #  End of function  create_virtualenv.


function delete_virtualenv() {
   rm -rf $python33_dir/virtenv/venv

}  #  End of function  delete_virtualenv.


function activate_virtualenv() {
   source "$python33_dir/activate_virtenv"

}  #  End of function  activate_virtualenv.


function make_virtualenv_relocatable() {
   pushd "$venv_dir" > /dev/null

   vdir=$(cd "${python33_dir}/virtenv"  &&  pwd)
   for zf in $(grep -l -r "#\!$vdir/venv/bin/" . ); do
      sed --follow-symlinks -i "s;#\!$vdir/venv/bin/;#\!/usr/bin/env ;" "$zf"
   done

   popd > /dev/null

}  #  End of function  make_virtualenv_relocatable.


#
#  Misc functions - add/remove environment variables and extract package files.
#

function _name_to_env_var_name() {
   echo "$1" | sed 's/[^A-Za-z0-9_]/_/g' | tr '[:lower:]' '[:upper:]'

}  #  End of function  _convert_name_to_env_var_name.


function add_cartridge_env_var() {
   [ -n "$1" ]  ||  return 1
   name=$(_name_to_env_var_name "$1")
   value=$2

   echo "$value" > "${OPENSHIFT_HOMEDIR}/$cartridge_type/.env/$name"

}  #  End of function  add_cartridge_env_var.


function remove_cartridge_env_var() {
   [ -n "$1" ]  ||  return 1
   name=$(_name_to_env_var_name "$1")
   cart_dir=${OPENSHIFT_HOMEDIR}/$cartridge_type

   [ -f "$cart_dir/.env/$name" ]  &&  rm -f $cart_dir/.env/$name

}  #  End of function  remove_cartridge_env_var.


function _extract_files() {
   pkgdir=${1:-"."}
   destdir=${2:-"."}

   [ -d "$pkgdir" ]  ||  return 1
 
   #  In place extract the tarball files -- supports .tgz, .tar.gz, .tar and
   #  zip files and in that order.
   mkdir -p "$destdir"
   pushd "$destdir" > /dev/null

   for f in `ls $pkgdir/*.tgz $pkgdir/*.tar.gz 2> /dev/null`; do
      tar -zxf "$f"
   done

   for f in `ls $pkgdir/*.tar 2> /dev/null`; do
      tar -xf "$f"
   done

   for f in `ls $pkgdir/*.zip 2> /dev/null`; do
      unzip "$f"
   done

   popd > /dev/null

}  #  End of function  _extract_files.


function extract_package_files() {
   #  Try the machine specific packages first and then the top level packages.
   _extract_files "$1/$(uname -m)" "$1"
   _extract_files "$1" "$1"

}  #  End of function  extract_package_files.


